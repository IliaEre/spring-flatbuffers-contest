// automatically generated by the FlatBuffers compiler, do not modify

package Complaince.Document;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Complaint extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Complaint getRootAsComplaint(ByteBuffer _bb) { return getRootAsComplaint(_bb, new Complaint()); }
  public static Complaint getRootAsComplaint(ByteBuffer _bb, Complaint obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Complaint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public boolean active() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public short status() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public Owner owner(int j) { return owner(new Owner(), j); }
  public Owner owner(Owner obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ownerLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public Owner.Vector ownerVector() { return ownerVector(new Owner.Vector()); }
  public Owner.Vector ownerVector(Owner.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createComplaint(FlatBufferBuilder builder,
      int idOffset,
      boolean active,
      short status,
      int ownerOffset) {
    builder.startTable(4);
    Complaint.addOwner(builder, ownerOffset);
    Complaint.addId(builder, idOffset);
    Complaint.addStatus(builder, status);
    Complaint.addActive(builder, active);
    return Complaint.endComplaint(builder);
  }

  public static void startComplaint(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addActive(FlatBufferBuilder builder, boolean active) { builder.addBoolean(1, active, false); }
  public static void addStatus(FlatBufferBuilder builder, short status) { builder.addShort(2, status, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(3, ownerOffset, 0); }
  public static int createOwnerVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOwnerVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endComplaint(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Complaint get(int j) { return get(new Complaint(), j); }
    public Complaint get(Complaint obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

